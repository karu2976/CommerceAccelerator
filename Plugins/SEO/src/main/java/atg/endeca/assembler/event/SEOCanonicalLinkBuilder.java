/*<ORACLECOPYRIGHT>
 * Copyright (C) 1994, 2017, Oracle and/or its affiliates. All rights reserved.
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates. 
 * Other names may be trademarks of their respective owners.
 * UNIX is a registered trademark of The Open Group.
 *
 * This software and related documentation are provided under a license agreement 
 * containing restrictions on use and disclosure and are protected by intellectual property laws. 
 * Except as expressly permitted in your license agreement or allowed by law, you may not use, copy, 
 * reproduce, translate, broadcast, modify, license, transmit, distribute, exhibit, perform, publish, 
 * or display any part, in any form, or by any means. Reverse engineering, disassembly, 
 * or decompilation of this software, unless required by law for interoperability, is prohibited.
 *
 * The information contained herein is subject to change without notice and is not warranted to be error-free. 
 * If you find any errors, please report them to us in writing.
 *
 * U.S. GOVERNMENT RIGHTS Programs, software, databases, and related documentation and technical data delivered to U.S. 
 * Government customers are "commercial computer software" or "commercial technical data" pursuant to the applicable 
 * Federal Acquisition Regulation and agency-specific supplemental regulations. 
 * As such, the use, duplication, disclosure, modification, and adaptation shall be subject to the restrictions and 
 * license terms set forth in the applicable Government contract, and, to the extent applicable by the terms of the 
 * Government contract, the additional rights set forth in FAR 52.227-19, Commercial Computer Software License 
 * (December 2007). Oracle America, Inc., 500 Oracle Parkway, Redwood City, CA 94065.
 *
 * This software or hardware is developed for general use in a variety of information management applications. 
 * It is not developed or intended for use in any inherently dangerous applications, including applications that 
 * may create a risk of personal injury. If you use this software or hardware in dangerous applications, 
 * then you shall be responsible to take all appropriate fail-safe, backup, redundancy, 
 * and other measures to ensure its safe use. Oracle Corporation and its affiliates disclaim any liability for any 
 * damages caused by use of this software or hardware in dangerous applications.
 *
 * This software or hardware and documentation may provide access to or information on content, 
 * products, and services from third parties. Oracle Corporation and its affiliates are not responsible for and 
 * expressly disclaim all warranties of any kind with respect to third-party content, products, and services. 
 * Oracle Corporation and its affiliates will not be responsible for any loss, costs, 
 * or damages incurred due to your access to or use of third-party content, products, or services.
 </ORACLECOPYRIGHT>*/

package atg.endeca.assembler.event;

import atg.core.net.URLUtils;
import atg.multisite.Site;
import atg.multisite.SiteContextManager;
import atg.multisite.SiteManager;
import atg.servlet.ServletUtil;

import com.endeca.infront.assembler.ContentItem;
import com.endeca.infront.assembler.event.request.RequestEvent;
import com.endeca.infront.cartridge.model.Action;
import com.endeca.infront.cartridge.model.NavigationAction;
import com.endeca.infront.cartridge.model.RecordAction;
import com.endeca.infront.navigation.url.event.CanonicalLinkBuilder;

/**
 *  This component will use the canonical link generated by CanonicalLinkBuilder
 *  and creates the proper URL for canonical link. 
 *
 * @author Oracle
 * @version $Id: //hosting-blueprint/CSA/version/11.3/Plugins/SEO/src/main/java/atg/endeca/assembler/event/SEOCanonicalLinkBuilder.java#1 $$Change: 1385662 $
 * @updated $DateTime: 2017/03/09 10:29:42 $
 */
public class SEOCanonicalLinkBuilder extends CanonicalLinkBuilder {

  /** Class version string */
  public static String CLASS_VERSION = "$Id: //hosting-blueprint/CSA/version/11.3/Plugins/SEO/src/main/java/atg/endeca/assembler/event/SEOCanonicalLinkBuilder.java#1 $$Change: 1385662 $";

  //---------------------------------------------------------------------------
  // CONSTANTS
  //---------------------------------------------------------------------------
  
  /** Canonical link property name added by CanonicalLinkBuilder. */
  public static final String CANONICAL_LINK = "canonicalLink";
  
  /** Current site production url. */
  public static final String CURRENT_SITE_PRODUCTION_URL = "atg:currentSiteProductionURL";

  /** Current request content path. */
  public String CONTENT_PATH = "endeca:contentPath";
  
  /** Canonical url property name. */
  public String CANONICAL_URL_PROPERTY_NAME = "canonical";
  
  //---------------------------------------------------------------------------
  // PROPERTIES
  //---------------------------------------------------------------------------
  
  //-----------------------------------
  // property: siteServerName
  //-----------------------------------
  public String mSiteServerName;
  
  /**
   * @return
   *   Returns server name.
   * 
   */
  public String getSiteServerName() {
    return mSiteServerName;
  }
  
  /**
   * @param pSiteServerName
   *   Set server name.
   */
  public void setSiteServerName(String pSiteServerName) {
    mSiteServerName = pSiteServerName;
  }

  //-----------------------------------
  // property: siteServerPort
  //-----------------------------------
  public int mSiteServerPort;
  
  /**
   * @return
   *   Returns server port.
   */
  public int getSiteServerPort() {
    return mSiteServerPort;
  }

  /**
   * @param pSiteServerPort
   *   Set server port.
   */
  public void setSiteServerPort(int pSiteServerPort) {
    mSiteServerPort = pSiteServerPort;
  }

  //---------------------------------------------------------------------------
  // METHODS
  //---------------------------------------------------------------------------  
  
  /**
   *  This method creates the complete URL for the current request and 
   *  add it to the content item as canonical link.
   * 
   *  @param requestEvent
   *    Assembler request event.
   *  @param pRootContentItem
   *    Root content item for current request.
   */
  public void handleAssemblerRequestEvent(RequestEvent requestEvent, ContentItem pRootContentItem) {
    super.handleAssemblerRequestEvent(requestEvent, pRootContentItem);
    StringBuilder link = new StringBuilder(ServletUtil.getCurrentRequest().getScheme());

    link.append("://")
      .append(getSiteServerName())
      .append(":")
      .append(getSiteServerPort());

    Site site = SiteContextManager.getCurrentSite();

    String contentPath = URLUtils.urlFromPunycode(ServletUtil.getCurrentRequest().getRequestURI());

    String[] additionalProductionURLs =
      (String[]) site.getPropertyValue(SiteManager.getSiteManager()
        .getAdditionalProductionURLPropertyName());

    boolean additionalProductionUrlFound = false;

    if (additionalProductionURLs != null) {
      for (String productionURL : additionalProductionURLs) {
        if (productionURL != null && productionURL.length() < 1) {
          continue;
        }

        if (contentPath.indexOf(productionURL + "/") == 0 && !productionURL.contentEquals("/")) {
          additionalProductionUrlFound = true;
          link.append(productionURL);
        }
      }
    }

    if (!additionalProductionUrlFound) {
      link.append(pRootContentItem.get(CURRENT_SITE_PRODUCTION_URL));
    }

    link.append(pRootContentItem.get(CONTENT_PATH));

    Action action = (Action)pRootContentItem.get(CANONICAL_LINK);
    if (action instanceof RecordAction) {
      link.append(((RecordAction)action).getRecordState());
    }
    else if (action instanceof NavigationAction) {
      link.append((((NavigationAction) action).getNavigationState()));
    }
    
    pRootContentItem.put(CANONICAL_URL_PROPERTY_NAME, removeParametersFromUrl(link.toString()));
  }

  /**
   * Remove all parameters from the passed in URL i.e. everything
   * after the '?' delimiter.
   *
   * @param pUrl
   *   The URL that will have all parameters removed from.
   * @return
   *   The modified URL that will contain no parameters.
   */
  public String removeParametersFromUrl(String pUrl) {
    int indexOfParamSeparator = pUrl.indexOf("?");

    // Remove any existing parameters from the URL and return the result.
    return (indexOfParamSeparator == -1) ? pUrl : pUrl.substring(0, indexOfParamSeparator);
  }
}
