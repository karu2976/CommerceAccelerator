<?xml version="1.0" encoding="UTF-8"?>

<!-- 
  input: randomizeItems - Boolean.
    true if should execute targetingRandom. Otherwise false or undefined.
  input: count - Integer.
    Number of items for the targeter to return.
  input: componentPath - String.
    Name of the targeter to for targetingRandom or targetingForEach to use.
  input: repositoryName - String.
    Name of the repository that the targeted items should be in.
  
  output: an array of item data (differs for product and promotional content) as an array named "items"
 -->
<actor-template default-chain-id="getTargetedItems"
                xsi:noNamespaceSchemaLocation="http://www.atg.com/xsds/actorChain_1.0.xsd"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <actor-chain id="getTargetedItems" transaction="TX_SUPPORTS">
    <!-- 
      Decide whether to use targetingRandom or targetingForEach to 
      target items and then return the targeted items.
    -->
    <actor id="targeterSwitch" name="/atg/targeting/TargetingServicesActor"
      return-model-var="items" chain-id="targeterSwitch">
      <input name="randomize"        value="${randomize}"/>
      <input name="componentPath"    value="${componentPath}"/>
      <input name="count"            value="${count}"/>
      <input name="fireViewItemEvent" value="false"/>
    </actor>
    
    <!-- 
      Loop through the targeted items and perform repository and item validation.
      Then fetch and output info about the targeted items that passed validation
    -->
    <droplet id="forEach" name="/atg/dynamo/droplet/ForEach" var="forEach">
      <input name="array" value="${items.targeterResults}"/>
      <oparam name="output">
        <droplet id="itemValidatorDroplet" name="/atg/droplet/ItemValidatorDroplet">
          <input name="item" value="${forEach.element}"/>
          <oparam name="true">
            <droplet id="repositoryIdSwitch" name="/atg/dynamo/droplet/Switch" var="switch">
              <input name="value" value="${forEach.element.itemDescriptor.repository.repositoryName.equals(repositoryName)}"/>
              <oparam name="true">
                <!-- Output item descriptions that dont depend on item type -->
                <output id="items" name="items[${forEach.index}]" value="${forEach.element}"/>
                <droplet id="itemDescriptorSwitch" name="/atg/dynamo/droplet/Switch" var="switch">
                  <input name="value" value="${forEach.element.itemDescriptor.itemDescriptorName}" />
                  <oparam name="product">
                    <!-- Output product specific information -->
                    <actor id="getProductInfo" name="/atg/endeca/assembler/cartridge/actor/TargetedItemsActor"
                        chain-id="getProductInfo" return-model-var="missingData">
                      <input name="product" value="${forEach.element}" />
                      <output id="items" name="items[${forEach.index}]" add-map-children="true" value="${missingData.product}" />
                    </actor>
                  </oparam>
                </droplet>
              </oparam>
            </droplet>
          </oparam>
        </droplet>
      </oparam>
    </droplet>
  </actor-chain>  
  
  <!-- 
    input: product - RepositoryItem.
      A product repository item. 
    output: product - Object.
      List and sale price ranges with currency code, site ID, siteName and repositoryID.
  -->
  <actor-chain id="getProductInfo">

    <!-- price ranges for sale and list price lists -->
    <actor id="productPriceRanges" name="/atg/commerce/pricing/PricingActor"
      return-model-var="productPriceRanges" chain-id="productPriceRanges">
      <input name="productId" value="${product.repositoryId}" />
    </actor>

    <!--
      Determine whether or not to display a sale price for a particular product. When the
      high list price and high sale price are not equal OR the low list price and low sale
      price are not equal, the sale price should be displayed.

      Input Parameters:
        value
          The condition to determine if the high list price is the same as the high sale
          price OR if the low list price is the same as the low sale price.

      Open Parameters:
        true
          When the high list price is not the same as the high sale price OR the low list
          price is not the same as the low sale price.
        false
          When the high list price is the same as the high sale price OR the low list
          price is the same as the low sale price.
      Output Parameters:

        showSalePrice
          'true' or 'false' depending on the outcome of the Switch.
    -->
    <droplet id="salePriceSwitch" name="/atg/dynamo/droplet/Switch" var="salePriceSwitch">
      <input name="value"
             value="${(productPriceRanges.highestListPrice.equals(productPriceRanges.highestSalePrice) != true) ||
                           productPriceRanges.lowestListPrice.equals(productPriceRanges.lowestSalePrice) != true}"/>
      <oparam name="true">
        <output id="showSalePrice" name="product.showSalePrice" value="true"/>
      </oparam>
      <oparam name="false">
        <output id="showSalePrice" name="product.showSalePrice" value="false"/>
      </oparam>
    </droplet>

    <!--
      Retrieve the sale price or sale price range for a particular product. When the low
      sale price and high sale price are the same, a single sale price will be set. If they
      are different, a sale price range will be set.

      Input Parameters:
        value
          The condition to determine if the low sale price and high sale price are the same.

      Open Parameters:
        true
          When the low sale price and high sale price are the same. A single sale price will
          be output.
        false
          When the low sale price and high sale price are the different. A sale price range
          will be output.

      Output Parameters:
        salePriceLists
          Array parameter that will be updated with the sale prices.
    -->
    <droplet id="singleSalePriceSwitch" name="/atg/dynamo/droplet/Switch">
      <input name="value" value="${productPriceRanges.lowestSalePrice.equals(productPriceRanges.highestSalePrice)}"/>
      <oparam name="true">
        <output id="salePrices" name="product.salePrices"
                value="${productPriceRanges.lowestSalePrice}" />
      </oparam>
      <oparam name="false">
        <output id="salePrices" name="product.salePrices"
                value="${productPriceRanges.lowestSalePrice} - ${productPriceRanges.highestSalePrice}" />
      </oparam>
    </droplet>

    <!--
      Retrieve the list price or list price range for a particular product. When the low
      list price and high list price are the same, a single list price will be set. If they
      are different, a list price range will be set.

      Input Parameters:
        value
          The condition to determine if the low list price and high list price are the same.

      Open Parameters:
        true
          When the low list price and high list price are the same.
        false
          When the low list price and high list price are the different.

      Output Parameters:
        listPriceLists
          Array parameter that will be updated with the list prices.
    -->
    <droplet id="singleListPriceSwitch" name="/atg/dynamo/droplet/Switch">
      <input name="value" value="${productPriceRanges.lowestListPrice.equals(productPriceRanges.highestListPrice)}"/>
      <oparam name="true">
        <output id="listPrices" name="product.listPrices"
                value="${productPriceRanges.lowestListPrice}" />
      </oparam>
      <oparam name="false">
        <output id="listPrices" name="product.listPrices"
                value="${productPriceRanges.lowestListPrice} - ${productPriceRanges.highestListPrice}" />
      </oparam>
    </droplet>
    
    <!-- Add site id. -->
    <droplet id="siteIdDroplet" name="/atg/commerce/multisite/SiteIdForCatalogItem" var="SiteIdDroplet">
      <input name="item"            value="${product}" />
      <input name="shareableTypeId" value="crs.MobileSite" />
      <oparam name="output">
        <output id="productSiteId" name="product.siteId" value="${siteId != null ? siteId : SiteIdDroplet.siteId}" />
        <droplet id="getSiteDroplet" name="/atg/dynamo/droplet/multisite/GetSiteDroplet"
                 var="GetSiteDroplet">
          <input name="siteId" value="${siteId != null ? siteId : SiteIdDroplet.siteId}" />
          <oparam name="output">
            <output id="productSiteName" name="product.siteName" value="${GetSiteDroplet.site.name}" />
          </oparam>
        </droplet>
      </oparam>
    </droplet>
    
    <!-- Add item's repository id. -->
    <output id="productRepositoryId" name="product.repositoryId" value="${product.repositoryId}" />
  </actor-chain>

</actor-template>
<!-- @version $Id: //hosting-blueprint/CSA/version/11.3/Plugins/Spotlights/src/main/config/atg/endeca/assembler/cartridge/actor/targetedItemsActor.xml#1 $$Change: 1385662 $-->