<?xml version="1.0" encoding="UTF-8"?>

<!-- 
  input: currentContentItem.randomizeItems - Boolean.  
    true if should execute targetingRandom. Otherwise false or undefined.
  input: currentContentItem.itemCount - Integer.
    Number of items for the targeter to return.
  input: currentContentItem.componentPath - String. 
    Name of the targeter to for targetingRandom or targetingForEach to use.
  input: currentContentItem.pathPrefix. - String. 
    Prefix of the component referenced by component path.
  input: currentContentItem.repository - Repository. 
    Repository that the targeted items should be contained in.
  
  output: An array of item data (differs for product and promotional content) as an array named "items".
 -->
<actor-template default-chain-id="getTargeterItems"
                xsi:noNamespaceSchemaLocation="http://www.atg.com/xsds/actorChain_1.0.xsd"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

  <!--
    Define all of the input parameters and invoke the 'executeTargeter' chain.
    Output the array of items that get generated.
  -->
  <actor-chain id="getTargeterItems" transaction="TX_SUPPORTS">
    <actor id="getFullComponentPath" name="/atg/endeca/assembler/cartridge/actor/HomepageTargetedItemsActor"
           return-model-var="getFullComponentPathOutput" chain-id="getFullComponentPath">
      <input name="pComponentPath"   value="${currentContentItem.componentPath}"/>
      <input name="pPathPrefix"      value="${currentContentItem.pathPrefix}"/>
    </actor>

    <actor id="targeterSwitch" name="/atg/endeca/assembler/cartridge/actor/HomepageTargetedItemsActor"
           return-model-var="items" chain-id="executeTargeter">
      <input name="randomize"      value="${currentContentItem.randomizeItems}"/>
      <input name="componentPath"  value="${getFullComponentPathOutput.fullComponentPath}"/>
      <input name="count"          value="${currentContentItem.itemCount}"/>

      <!--
        The currentContentItem.repository value can either be a Repository or a
        String value representing the repository path. When it is a String value,
        resolve the repository then retrieve the repository name, otherwise just
        retrieve the name.
      -->
      <input name="repositoryName"
             value="${currentContentItem.repository['class'].name == 'java.lang.String' ?
               nucleus[currentContentItem.repository].repositoryName :
               currentContentItem.repository.repositoryName}" />

      <!-- Output items -->
      <output name="items" id="items" value="${items.items}"/>
    </actor>
  </actor-chain>


  <actor-chain id="executeTargeter" transaction="TX_SUPPORTS">

    <!--
      Decide whether to use targetingRandom or targetingForEach to
      target items and then return the targeted items.
    -->
    <actor id="targeterSwitch" name="/atg/targeting/TargetingServicesActor"
           return-model-var="items" chain-id="targeterSwitch">
      <input name="randomize"        value="${randomize}"/>
      <input name="componentPath"    value="${componentPath}"/>
      <input name="count"            value="${count}"/>
      <input name="fireViewItemEvent" value="false"/>
    </actor>

    <!--
      Loop through the targeted items and perform repository and item validation.
      Then fetch and output info about the targeted items that passed validation
    -->
    <droplet id="forEach" name="/atg/dynamo/droplet/ForEach" var="forEach">
      <input name="array" value="${items.targeterResults}"/>
      <oparam name="output">
        <droplet id="itemValidatorDroplet" name="/atg/droplet/ItemValidatorDroplet">
          <input name="item" value="${forEach.element}"/>
          <oparam name="true">
            <droplet id="repositoryIdSwitch" name="/atg/dynamo/droplet/Switch" var="switch">
              <input name="value" value="${forEach.element.itemDescriptor.repository.repositoryName.equals(repositoryName)}"/>
              <oparam name="true">
                <output id="items" name="items[${forEach.index}]" value="${forEach.element}"/>
                <droplet id="itemDescriptorSwitch" name="/atg/dynamo/droplet/Switch" var="switch">
                  <input name="value" value="${forEach.element.itemDescriptor.itemDescriptorName}" />
                  <oparam name="product">
                    <!-- Output product specific information -->
                    <actor id="getProductInfo" name="/atg/endeca/assembler/cartridge/actor/TargetedItemsActor"
                           chain-id="getProductInfo" return-model-var="missingData">
                      <input name="product" value="${forEach.element}" />
                      <output id="items" name="items[${forEach.index}]" add-map-children="true" value="${missingData.product}" />
                    </actor>
                  </oparam>
                </droplet>
              </oparam>
            </droplet>
          </oparam>
        </droplet>
      </oparam>
    </droplet>
  </actor-chain>

  <!--  
    Gets the full component path from partial component path.
    
    input: pComponentPath
      Either partial or full component path.
    input: pPathPrefix
      Component path prefix.
    
    output: fullComponentPath
      Full path to componentPath (either pathPrefix + componentPath or just componentPath if it 
      is already the full component path.
   -->
  <actor-chain id="getFullComponentPath" transaction="TX_SUPPORTS">
    <droplet id="isFullPathSwitch" name="/atg/dynamo/droplet/Switch" var="switch">
      <input  name="value" value="${pComponentPath.startsWith('/') or pComponentPath.startsWith(pPathPrefix)}"/>
      
      <oparam name="true">
        <output name="fullComponentPath" id="fullComponentPath" value="${pComponentPath}"/>
      </oparam>
      
      <oparam name="default">
        <droplet id="separateWithSlashSwitch" name="/atg/dynamo/droplet/Switch" var="switch">
          <input name="value" value="${pPathPrefix.endsWith('/')}"/>
          <oparam name="true">
            <output name="fullComponentPath" id="fullComponentPath" value="${pPathPrefix}${pComponentPath}"/>
          </oparam>
          <oparam name="default">
            <output name="fullComponentPath" id="fullComponentPath" value="${pPathPrefix}/${pComponentPath}"/>
          </oparam>
        </droplet>
      </oparam>
    </droplet>
  </actor-chain>

</actor-template>
<!-- @version $Id: //hosting-blueprint/CSA/version/11.3/Applications/B2CStore/Plugins/Spotlights/src/main/config/atg/endeca/assembler/cartridge/actor/homepageTargetedItemsActor.xml#1 $$Change: 1385662 $-->